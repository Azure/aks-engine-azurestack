name: Release

on:
  push:
    branches:
      - release-*
    paths:
      - 'releases/CHANGELOG*.md'

env:
  LINUX_NODE_IMAGE_SUBSCRIPTION_ID: ${{ secrets.TEST_AZURE_SUB_ID }}
  LINUX_NODE_IMAGE_RESOURCE_GROUP: ${{vars.LINUX_NODE_IMAGE_RESOURCE_GROUP}}
  LINUX_NODE_IMAGE_GALLERY: ${{vars.LINUX_NODE_IMAGE_GALLERY}}
  LINUX_NODE_IMAGE_NAME: ${{vars.LINUX_NODE_IMAGE_NAME}}
  LINUX_NODE_IMAGE_VERSION: 2023.079.1
  WINDOWS_NODE_IMAGE_SUBSCRIPTION_ID: ${{ secrets.TEST_AZURE_SUB_ID }}
  WINDOWS_NODE_IMAGE_RESOURCE_GROUP: ${{vars.WINDOWS_NODE_IMAGE_RESOURCE_GROUP}}
  WINDOWS_NODE_IMAGE_GALLERY: ${{vars.WINDOWS_NODE_IMAGE_GALLERY}}
  WINDOWS_NODE_IMAGE_NAME: ${{vars.WINDOWS_NODE_IMAGE_NAME}}
  WINDOWS_NODE_IMAGE_VERSION: 2023.079.1

jobs:
  sig_image_versions:
    runs-on: ubuntu-latest
    outputs:
      LINUX_NODE_IMAGE_VERSION: ${{ env.LINUX_NODE_IMAGE_VERSION }}
      WINDOWS_NODE_IMAGE_VERSION: ${{ env.WINDOWS_NODE_IMAGE_VERSION }}
    steps:
      - run: echo "Exposing sig image version variables"
  validate-no-egress:
    needs: sig_image_versions
    uses: ./.github/workflows/test-vhd-no-egress.yaml
    with:
      from_branch: ''
      LINUX_NODE_IMAGE_VERSION: ${{ needs.sig_image_versions.outputs.LINUX_NODE_IMAGE_VERSION }}
      WINDOWS_NODE_IMAGE_VERSION: ${{ needs.sig_image_versions.outputs.WINDOWS_NODE_IMAGE_VERSION }}
    secrets: inherit
  build:
    needs: validate-no-egress
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: set env
        run: |
          export CURRENT_BRANCH=$(git branch --show-current)
          echo "RELEASE_VERSION=${CURRENT_BRANCH:8}" >> $GITHUB_ENV # release-v1.0.0 substring starting at v1.0.0
      - name: Validate tag does not already exist
        run: |
          if [[ $(git tag -l ${{ env.RELEASE_VERSION }}) ]]; then
            exit 1
          fi
      - name: Setup SSH Keys and known_hosts
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
      - name: Validate CHANGELOG # We require a pre-existing CHANGELOG specific for this release in order to proceed
        run: |
          [ -s releases/CHANGELOG-${{ env.RELEASE_VERSION }}.md ]
      - name: Install go
        uses: actions/setup-go@v3
        with:
          go-version-file: 'go.mod'
      - name: Install helm
        run: |
          curl https://baltocdn.com/helm/signing.asc | sudo apt-key add -
          sudo apt-get install apt-transport-https --yes
          echo "deb https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
          sudo apt-get update
          sudo apt-get install helm
      - name: Install k
        run: |
          sudo curl -o /usr/local/bin/k https://raw.githubusercontent.com/jakepearson/k/master/k
          sudo chmod +x /usr/local/bin/k
      - name: Build aks-engine-azurestack binary
        run: make build-binary
      - name: print git status after build
        run: |
          git status
      - name: Validate 1.24 + containerd E2E
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
          ORCHESTRATOR_RELEASE: "1.24"
          CLUSTER_DEFINITION: "examples/e2e-tests/kubernetes/release/default/definition.json"
          SUBSCRIPTION_ID: ${{ secrets.TEST_AZURE_SUB_ID }}
          CLIENT_ID: ${{ secrets.TEST_AZURE_SP_ID }}
          CLIENT_SECRET: ${{ secrets.TEST_AZURE_SP_PW }}
          LOCATION: "eastus"
          TENANT_ID: ${{ secrets.TEST_AZURE_TENANT_ID }}
          CREATE_VNET: true
          CLEANUP_ON_EXIT: true
          CLEANUP_IF_FAIL: true
          GINKGO_SKIP: ""
          STABILITY_ITERATIONS: "0"
          RETAIN_SSH: false
          CONTAINER_RUNTIME: "containerd"
          BLOCK_SSH: true
          SKIP_LOGS_COLLECTION: true
          AZURE_CORE_ONLY_SHOW_ERRORS: true
          DISTRO: "aks-ubuntu-20.04"
        run: make test-kubernetes
      - name: Validate 1.25 + containerd E2E
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
          ORCHESTRATOR_RELEASE: "1.25"
          CLUSTER_DEFINITION: "examples/e2e-tests/kubernetes/release/default/definition.json"
          SUBSCRIPTION_ID: ${{ secrets.TEST_AZURE_SUB_ID }}
          CLIENT_ID: ${{ secrets.TEST_AZURE_SP_ID }}
          CLIENT_SECRET: ${{ secrets.TEST_AZURE_SP_PW }}
          LOCATION: "eastus"
          TENANT_ID: ${{ secrets.TEST_AZURE_TENANT_ID }}
          CREATE_VNET: true
          CLEANUP_ON_EXIT: true
          CLEANUP_IF_FAIL: true
          GINKGO_SKIP: ""
          STABILITY_ITERATIONS: "0"
          RETAIN_SSH: false
          CONTAINER_RUNTIME: "containerd"
          BLOCK_SSH: true
          SKIP_LOGS_COLLECTION: true
          AZURE_CORE_ONLY_SHOW_ERRORS: true
          DISTRO: "aks-ubuntu-20.04"
        run: make test-kubernetes
      - name: Remove untracked files created during workflow steps
        run: git ls-files --others --exclude-standard -z | xargs -0 -r rm
      - name: Add local tag
        run: git tag ${{ env.RELEASE_VERSION }}
      - name: print and validate git status before producing binaries
        run: |
          git status
          git status | grep 'working tree clean'
      - name: clean all unstaged changes
        run: |
          git checkout -- .
      - name: Build Artifacts
        run: |
          make dist
      - name: Remove local tag
        run: git tag -d ${{ env.RELEASE_VERSION }}
      - name: Publish Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: _dist/aks-engine-azurestack*-*-*.*
          bodyFile: releases/CHANGELOG-${{ env.RELEASE_VERSION }}.md
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ env.RELEASE_VERSION }}
          commit: release-${{ env.RELEASE_VERSION }}
          prerelease: true
