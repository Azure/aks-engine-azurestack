name: Pull Request

on:
  workflow_dispatch:
    inputs:
      from_branch:
        description: 'Which branch are we testing? (if left blank, by default will use the branch used to trigger workflow)'
        required: false
        default: ''
      LINUX_NODE_IMAGE_VERSION:
        description: 'What is the Linux SIG image version?'
        required: true
        default: 2024.032.1
      WINDOWS_NODE_IMAGE_VERSION:
        description: 'What is the Windows SIG image version?'
        required: true
        default: 2024.032.1

jobs:
  # unit-tests:
  #   runs-on: self-hosted
  #   container:
  #     image: mcr.microsoft.com/oss/azcu/go-dev:v1.36.2
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #       with:
  #         ref: ${{inputs.from_branch}}
  #     - name: Set up Go
  #       uses: actions/setup-go@v3
  #       with:
  #         go-version-file: "go.mod"
  #     - name: Install dependencies
  #       run: make bootstrap
  #     - name: Check generated code
  #       run: make ensure-generated
  #     - name: Run linting rules
  #       run: make generate test-style
  #     - name: Build binary
  #       run: make build-binary
  #     - name: Check go mod
  #       run: make validate-dependencies
  #     - name: Run unit tests
  #       run: make test

  e2e:
    runs-on: self-hosted
    container:
      image: mcr.microsoft.com/oss/azcu/go-dev:v1.36.2
    env:
      TIMEOUT: 30m
      CLUSTER_DEFINITION: "examples/e2e-tests/kubernetes/release/default/definition-no-vnet.json"
      SUBSCRIPTION_ID: ${{ secrets.TEST_AZURE_SUB_ID }}
      CLIENT_ID: ${{ secrets.TEST_AZURE_SP_ID }}
      CLIENT_SECRET: ${{ secrets.TEST_AZURE_SP_PW }}
      LOCATION: "eastus"
      TENANT_ID: ${{ secrets.TEST_AZURE_TENANT_ID }}
      CREATE_VNET: false
      CLEANUP_ON_EXIT: true
      CLEANUP_IF_FAIL: true
      SKIP_TEST: false
      GINKGO_SKIP: ""
      RETAIN_SSH: false
      USE_MANAGED_IDENTITY: true
      MSI_USER_ASSIGNED_ID: ${{ secrets.MSI_USER_ASSIGNED_ID_AKS_ENGINE_E2E }}
      ENABLE_KMS_ENCRYPTION: false
      CONTAINER_RUNTIME: "containerd"
      BLOCK_SSH: true
      DISTRO: "aks-ubuntu-20.04"
      AZURE_CORE_ONLY_SHOW_ERRORS: true
      STABILITY_ITERATIONS: 0
      WINDOWS_NODE_IMAGE_SUBSCRIPTION_ID: ${{ secrets.TEST_AZURE_SUB_ID }}
      WINDOWS_NODE_IMAGE_RESOURCE_GROUP: ${{vars.WINDOWS_NODE_IMAGE_RESOURCE_GROUP}}
      WINDOWS_NODE_IMAGE_GALLERY: ${{vars.WINDOWS_NODE_IMAGE_GALLERY}}
      WINDOWS_NODE_IMAGE_NAME: ${{vars.WINDOWS_NODE_IMAGE_NAME}}
      WINDOWS_NODE_IMAGE_VERSION: ${{inputs.WINDOWS_NODE_IMAGE_VERSION}}
      LINUX_NODE_IMAGE_SUBSCRIPTION_ID: ${{ secrets.TEST_AZURE_SUB_ID }}
      LINUX_NODE_IMAGE_RESOURCE_GROUP: ${{vars.LINUX_NODE_IMAGE_RESOURCE_GROUP}}
      LINUX_NODE_IMAGE_GALLERY: ${{vars.LINUX_NODE_IMAGE_GALLERY}}
      LINUX_NODE_IMAGE_NAME: ${{vars.LINUX_NODE_IMAGE_NAME}}
      LINUX_NODE_IMAGE_VERSION: ${{inputs.LINUX_NODE_IMAGE_VERSION}}
      TEST_PVC: true
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version-file: "go.mod"
      - name: Build aks-engine-azurestack binary
        run: make build-binary
      - name: Validate 1.27 no-egress scenario
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
          ORCHESTRATOR_RELEASE: "1.27"
        run: make test-kubernetes
